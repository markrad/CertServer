extends layout

block layout-content
  script(type="text/javascript").

    //- BUG Fix key insertion sort sequence
    
    const typeLookup = [
      '',
      'root',
      'intermediate', 
      'leaf',
      'key',
    ]

    async function getDir(dir) {
      return new Promise((resolve, reject) => {
        $.ajax({
          url: `/certlist?type=${dir}`,
          method: 'GET',
          error: (xhr, status, err) => { 
            console.error('Failed to get ' + dir);
            reject(err);
          },
          success: (result, status, xhr) => {
            resolve(result);
          }
        });
      });
    }

    function buildKeyList(target, files) {
      target.empty();
      if (files.length == 0)
        target.append('<li class="empty">None</li>');
      else
        files.sort((l, r) => l.name.localeCompare(r))
        .forEach((file) => {
          target.append(buildKeyEntry(file));
      });
    }

    function buildKeyEntry(file) {
      let listEntryHTML = ({ id, name }) => `
        <li class="keyLine" id="k${id}">
          <span onclick="keyClick('${id}')">
            <span class="keyArrow">></span>
            <span class="certValue">${name}</span>
            <span class="idLine">
              <span class="idLabel">Id: </span>
              <span class="idValue">${id}</span>
            </span>
          </span>
          <div class="keyDetails">
          </div>
        </li>
      `;
      return listEntryHTML({ id: file.id, name: file.name });
    }

    function buildCertList(target, files) {
      target.empty();
      if (files.length == 0)
        target.append('<li class="empty">None</li>');
      else
        files.sort((l, r) => l.name.localeCompare(r))
        .forEach((file) => {
          target.append(buildCertEntry(file));
        });
    }

    function buildCertEntry(file) {
      let listEntryHTML = ({ id, name }) => `
        <li class="certLine" id="c${id}">
          <span onclick="certClick('${id}')">
            <span class="certArrow">˃</span>
            <span class="certValue">${name}</span>
            <span class="idLine">
              <span class="idLabel">Id: </span>
              <span class="idValue">${id}</span>
            </span>
          </span>
          <div class="certDetails">
          </div>
        </li>
      `;
      return listEntryHTML({ id: file.id, name: file.name });
    }

    function buildCertDetail(detail) {
      let detailHTML = ({
        id,
        name,
        certType,
        withKeyPresent,
        serialNumber,
        fingerprint,
        fingerprint256,
        subjectC,
        subjectST,
        subjectL,
        subjectO,
        subjectOU,
        subjectCN,
        issuerC,
        issuerST,
        issuerL,
        issuerO,
        issuerOU,
        issuerCN,
        validFrom,
        validTo,
        signer,
        keyPresent,
      }) => `
        <div class="certInfo slideform">
          <div class="certInfoButtons"> 
            <a href="/api/getCertificatePem?id=${id}" class="button2 certBtnDownload">Download</a>
            <a href="/api/chaindownload?id=${id}" class="button2 certBtnDownloadChain">Download Chain</a>
            <button type="button" class="button2 button2Red certBtnDelete" onClick="certDelete('${name}', '${id}')">Delete</button>
            <span class="certOptionalButtons">
              <button type="button" class="button2" onClick="newIntermediateDialog('${id}', '${name}')">New Intermediate</button>
              <button type="button" class="button2" onClick="newLeafDialog('${id}', '${name}')">New Leaf</button>
            </span>
          </div>
          <div class="certInfoType">
            <span class="certTypeLabel">Type:&nbsp;</span>
            <span class="certTypeValue">${certType}</span>
            <span class="certPrivateKey">${withKeyPresent}</span></div>
          <div class="certInfoSerial">Serial Number: ${serialNumber}</div>  
          <div class="certFingerprint">FingerPrint: ${fingerprint}</div>
          <div class="certFingerprint256">FingerPrint256: ${fingerprint256}</div>
          <div class="certInfoSubject">Subject:&nbsp;
            <span class="certInfoSubjectC">C=${subjectC};&nbsp;</span>
            <span class="certInfoSubjectST">ST=${subjectST};&nbsp;</span>
            <span class="certInfoSubjectL">L=${subjectL};&nbsp;</span>
            <span class="certInfoSubjectO">O=${subjectO};&nbsp;</span>
            <span class="certInfoSubjectOU">OU=${subjectOU}; </span>
            <span class="certInfoSubjectCN">CN=${subjectCN}</span>
          </div>
          <div class="certInfoIssuer">&nbsp;Issuer:&nbsp;
            <span class="certInfoIssuerC">C=${issuerC};&nbsp;</span>
            <span class="certInfoIssuerST">ST=${issuerST};&nbsp;</span>
            <span class="certInfoIssuerL">L=${issuerL};&nbsp;</span>
            <span class="certInfoIssuerO">O=${issuerO};&nbsp;</span>
            <span class="certInfoIssuerOU">OU=${issuerOU};&nbsp;</span>
            <span class="certInfoIssuerCN">CN=${issuerCN}</span>
          </div>
          <div class="certInfoFrom">Valid from: ${validFrom}</div>
          <div class="certInfoTo">Valid to: ${validTo}</div>
          <div class="certInfoSigner">
            <span class="certInfoSignerLabel">Signed by:&nbsp;</span>
            <span class="certInfoSignerValue">${signer}</span>
          </div>
          <div class="certInfoKey">
            <span class="certInfoKeyLabel">Key Present:&nbsp;</span>
            <span class="certInfoKeyValue">${keyPresent}</span>
          </div>
        </div>
      `;
      return detailHTML({
        id: detail.id,
        name: detail.name,
        certType: detail.certType,
        withKeyPresent: detail.keyPresent == 'yes'? ' with private key' : '',
        serialNumber: detail.serialNumber,
        fingerprint: detail.fingerprint,
        fingerprint256: detail.fingerprint256,
        subjectC: detail.subject.C,
        subjectST: detail.subject.ST,
        subjectL: detail.subject.L,
        subjectO: detail.subject.O,
        subjectOU: detail.subject.OU,
        subjectCN: detail.subject.CN,
        issuerC: detail.issuer.C,
        issuerST: detail.issuer.ST,
        issuerL: detail.issuer.L,
        issuerO: detail.issuer.O,
        issuerOU: detail.issuer.OU,
        issuerCN: detail.issuer.CN,
        validFrom: detail.validFrom,
        validTo: detail.validTo,
        signer: detail.signer,
        keyPresent: detail.keyPresent,
      });
    }

    async function certClick(id) {
      console.log('.certLine#c' + id);
      let line = $('.certLine#c' + id);
      let details = line.find('.certDetails');
      let arrow = line.find('.certArrow');
      if (details.is(':hidden') == false) {
        details.slideUp(400, () => {
          details['0'].innerText = '';
          arrow['0'].innerText = '>';
        });
      }
      else {
        arrow['0'].innerText = '˅';
        try {
          var result = await getCertDetails({ id: id});
          let content = buildCertDetail(result);
          details['0'].innerHTML = content;
          if (result.certType == 'root') details.find('.' + 'certBtnDownloadChain').hide();
          if (result.keyPresent == 'no' || result.certType == 'leaf') details.find('.' + 'certOptionalButtons').hide();
          let nullTest = [
            [result.subject.C, 'certInfoSubjectC'],
            [result.subject.ST, 'certInfoSubjectST'],
            [result.subject.L, 'certInfoSubjectL'],
            [result.subject.O, 'certInfoSubjectO'],
            [result.subject.OU, 'certInfoSubjectOU'],
            [result.subject.CN, 'certInfoSubjectCN'],
            [result.issuer.C, 'certInfoIssuerC'],
            [result.issuer.ST, 'certInfoIssuerST'],
            [result.issuer.L, 'certInfoIssuerL'],
            [result.issuer.O, 'certInfoIssuerO'],
            [result.issuer.OU, 'certInfoIssuerOU'],
            [result.issuer.CN, 'certInfoIssuerCN'],
            [result.signed, 'certInfoSigned'], 
          ].forEach((entry) => {
            if (entry[0] == null) {
              let t = details.find('.' + entry[1]);
              t.hide();
            }
          });
          
          details.slideDown(500);

          //- console.log('success');
        }
        catch ({ error, message }) {
          $.magnificPopup.open({
            items: {
              src: `<div class="error-popup">${error}: ${message}</div>`,
              type: 'inline'
            }
          });
        }
      }
    }

    async function getCertDetails({ name, id }) {
      return new Promise(async (resolve, reject) => {
        try {
          let url = '/certDetails' + (name? '?name=' + name : '?id=' + id);
          var request = $.ajax({
            url: url,
            method: 'GET',
            processData: false,
            contentType: false,
            error: (xhr, msg, err) => {
              reject({ error: err, message: xhr.responseText});
            },
            success: (result, status) => {
              resolve(result);
            }
          });
        }
        catch (err) {
          reject({ error: err, message: 'Unknown error'});
        }       
      });
    }

    function certDelete(name, id) {
      if (confirm(`This will delete certificate ${name}. \n\nDo you wish to continue?`)) {
        console.log('Would delete ' + name);
        var request = $.ajax({
          url: '/deleteCert?id=' + id,
          method: 'DELETE',
          processData: false,
          contentType: false,
          error: (xhr, msg, err) => {
            let result = JSON.parse(xhr.responseJSON);
            $.magnificPopup.open({
              items: {
                src: `<div class="error-popup">${err}: ${result.error}</div>`,
                type: 'inline'
              }
            });
          },
          success: async (result, status) => {
            //- processChanges(result.types);
            $.magnificPopup.open({
              items: {
                src: `<div class="white-popup">Certificate ${name} deleted</div>`,
                type: 'inline'
              }
            });
          }
        });
      }
    }

    function processChanges(types) {
      types.split(';').forEach(async (type) => {
        let files = await getDir(type);
        if (type == 'key') buildKeyList($(`#${type}List`), files.files);
        else buildCertList($(`#${type}List`), files.files);
      });
    }

    function newIntermediateDialog(id, name) {
      console.log(name);
      let dialog = $('#newIntermediate');
      dialog.dialog('option', 'title', `${name} -> intermediate`);
      $('#intermediateSigner').val(id); 
      dialog.dialog('open');
    }

    function newLeafDialog(id, name) {
      console.log(name);
      let dialog = $('#newLeaf');
      dialog.dialog('option', 'title', `${name} -> leaf`);
      $('#leafSigner').val(id); 
      dialog.dialog('open');
    }

    function buildKeyDetail(detail) {
      let detailHTML = ({ id, name, certPair, encrypted }) => `
        <div class="keyInfo slideform">
          <div class="certInfoButtons"> 
            <button type="button" class="button2 keyBtnDownload" onClick="keyDownload('${id}')">Download</button>
            <button type="button" class="button2 button2Red keyBtnDelete" onClick="keyDelete('${id}')">Delete</button>
          </div>
          <div class="keyName">
            <span class="keyNameLabel">Name:&nbsp;</span>
            <span class="keyNameValue">${name}</span>
          </div>
          <div class="keyPair">
            <span class="keyPairLabel">Pair:&nbsp;</span>
            <span class="keyPairValue">${certPair}</span>
          </div>
          <div class="keyEncrypted">
            <span class="keyEncryptedLabel">Encrypted:&nbsp;</span>
            <span class="keyEncryptedValue">${encrypted}</span>
          </div>
      `;
      return detailHTML({ id: detail.id, name: detail.name, certPair: detail.certPair, encrypted: result.encrypted? 'yes' : 'no' });
    }

    async function keyClick(id) {
      console.log('key click ' + id);
      let line = $('.keyLine#k' + id);
      let details = line.find('.keyDetails');
      let arrow = line.find('.keyArrow');
      if (details.is(':hidden') == false) {
        details.slideUp(400, () => {
          details['0'].innerText = '';
          arrow['0'].innerText = '>';
        });
      }
      else {
        arrow['0'].innerText = '˅';
        try {
          result = await getKeyDetails({ id: id });
          let content = buildKeyDetail(result);
          details['0'].innerHTML = content;
          console.log('success');
          details.slideDown(500);           // &#9650
        }
        catch (err) {
          $.magnificPopup.open({
            items: {
              src: `<div class="error-popup">${err.error}: ${err.message}</div>`,
              type: 'inline'
            }
          });
        };
      };
    }

    async function getKeyDetails({ name, id }) {
      return new Promise((resolve, reject) => {
        let url = '/keyDetails?' + (name? 'name=' + name : 'id=' + id);
        var request = $.ajax({
          url: url,
          method: 'GET',
          processData: false,
          contentType: false,
          error: (xhr, msg, err) => {
            reject({ error: err, message: xhr.responseText });
          },
          success: (result, status) => {
            resolve(result);
          }
        });
      })      
    }

    function keyDownload(id) {
      let filename = name + '.pem';
      let filelocation = '/api/getkeypem?id=' + id;
      const anchor = $('<a>', { href: filelocation, download: filename })[0];
      $('body').append(anchor);
      anchor.click();
      $(anchor).remove();
    }

    function keyDelete(id) {
      if (confirm(`This will delete ${id}. \n\nDo you wish to continue?`)) {
        var request = $.ajax({
          url: '/deleteKey?id=' + id,
          method: 'DELETE',
          processData: false,
          contentType: false,
          error: (xhr, msg, err) => {
            $.magnificPopup.open({
              items: {
                src: `<div class="error-popup">${err}: ${JSON.parse(xhr.responseText).error}</div>`,
                type: 'inline'
              }
            });
          },
          success: async (result, status) => {
            //- processChanges(result.types);
            $.magnificPopup.open({
              items: {
                src: `<div class="white-popup">Key ${name} Deleted</div>`,
                type: 'inline'
              }
            });
          }
        });
      }
    }

    function togglePane(id) {
      let p = $(id);
      if (p.is(':visible')) {
        p.slideUp(500);
      }
      else {
        ['#uploadCertForm', '#uploadKeyForm', '#generateCertForm'].forEach((form) => {
          if (form != id) $(form).slideUp(500);
        })
        p.slideDown(500);
      }
    }

    function uploadCert(e) {
      //- e.preventDefault();
      var data = new FormData();
      var files = $('#certUpload');
      if (files[0].files.length == 0) {
        alert('No files choosen');
      }
      else {
        console.log('we have something to upload');
        for (let i = 0; i < files[0].files.length; i++) {
          data.append('certFile', files[0].files[i]);
        }

        var request = $.ajax({
          url: '/uploadCert',
          method: 'POST',
          processData: false,
          contentType: false,
          data: data,
          error: (xhr, msg, err) => {
            document.getElementById('uploadCertForm').reset();
            $.magnificPopup.open({
              items: {
                src: `<div class="error-popup">${err}: ${xhr.responseText}</div>`,
                type: 'inline'
              }
            });
            //- alert(JSON.stringify(err));
          },
          success: async (result, status) => {
            document.getElementById('uploadCertForm').reset();
            //- processChanges(result.types);
            $.magnificPopup.open({
              items: {
                src: `<div class="white-popup">File uploaded</div>`,
                type: 'inline'
              }
            });
          }
        });
      }
    }
    function uploadKey(e) {
      var data = new FormData();
      var files = $('#keyUpload');
      if (files[0].files.length == 0) {
        alert('No files choosen');
      }
      else {
        console.log('we have something to upload');
        for (let i = 0; i < files[0].files.length; i++) {
          data.append('keyFile', files[0].files[i]);
        }

        let url = '/uploadKey' + ($('#keyPasswordValue').val() == ''? '' : `?password=${$('#keyPasswordValue').val()}`);

        var request = $.ajax({
          url: url,
          method: 'POST',
          processData: false,
          contentType: false,
          data: data,
          error: (xhr, msg, err) => {
            document.getElementById('uploadKeyForm').reset();
            $.magnificPopup.open({
              items: {
                src: `<div class="error-popup">${err}: ${xhr.responseText}</div>`,
                type: 'inline'
              }
            });
          },
          success: async (result, status) => {
            document.getElementById('uploadKeyForm').reset();
            //- processChanges(result.types);
            $.magnificPopup.open({
              items: {
                src: `<div class="white-popup">Key uploaded</div>`,
                type: 'inline'
              }
            });
          }
        });
      }
    }

    function createCACertResponse(result) {
      console.log(result);
      //- processChanges(result.types);
      $('#generateCAReset').click();
      $.magnificPopup.open({
        items: {
          src: `<div class="white-popup">${result.message}</div>`,
          type: 'inline'
        }
      });
    }

    function createIntermediateCertResponse(result) {
      console.log(result);
      $('#generateIntermediateReset').click();
      $.magnificPopup.open({
        items: {
          src: `<div class="white-popup">${result.message}</div>`,
          type: 'inline'
        }
      });
      $('#newIntermediate').dialog('close');
    }

    function createLeafCertResponse(result) {
      console.log(result);
      //- processChanges(result.types);
      $('#generateLeafReset').click();
      $.magnificPopup.open({
        items: {
          src: `<div class="white-popup">${result.message}</div>`,
          type: 'inline'
        }
      });
      $('#newLeaf').dialog('close');
    }

    function resetLeafForm() {
      $('#newLeafForm')[0].reset();
      $('#SANList').empty();
    }

    async function getName(type, id) {
      return new Promise((resolve, reject) => {
        let url = type == 4? '/api/keyname' : '/api/certname';
        url += '?id=' + id.toString();
        var request = $.ajax({
          url: url,
          method: 'GET',
          processData: false,
          contentType: false,
          error: (xhr, msg, err) => {
            reject(err);
          },
          success: async (result, status) => {
            resolve(result.name);
          }
        });
      });
    }

    function AddSAN() {
      let list = $('#SANList');
      let input = $('#SANInput');
      let type = input.find('.SANType');
      let value = input.find('.SANValue');
      let spanId = 'SAN' + list.children().length;
      let newSpan = $(`<div id=${spanId}></div>`);
      let newButton = $(`<input type='button' value='✘' onClick="removeSAN('${spanId}')"></input>`);
      let newEntry = $(`<input type='text' name='SANArray' value='${type.val()}: ${value.val()}' class='SANList' readonly></input>`);
      newSpan.append(newButton);
      newSpan.append(newEntry);
      list.append(newSpan);
      type.val('DNS');
      value.val('');
    }

    function removeSAN(spanId) {
      $('#' + spanId).remove();
    }

    function processUpdates(changePacket) {
      console.log('Changes: ' + changePacket);
      changeJSON = JSON.parse(changePacket);
      let lists = ['#rootList', '#intermediateList', '#leafList', '#keyList'];

      changeJSON.deleted.forEach((change) => {
        console.log(change);
        $(`#${change.type == 4? 'k' : 'c'}${change.id}`).remove();
      });

      lists.forEach((header) => {
        if ($(`${header} li`).length == 0) {
          $(header).append('<li class="empty">None</li>');
        }
      });

      changeJSON.added.forEach(async (change) => {
        let certs = [];
        let name = await getName(change.type, change.id);
        let header = $(`${lists[change.type - 1]} li`);
        let entry = await (change.type == 4? buildKeyEntry({ name: name, id: change.id }) : buildCertEntry({ name: name, id: change.id }));

        if (header.length > 0 && header.first().attr('class') == 'empty') {
          header.first().remove();
        }

        console.log(name);
        $(`#${typeLookup[change.type]}List li`).each(function() {
          let span = $(this).find('span.certValue');
          certs.push({ parent: $(this), span: span.text() });
        });
        if (certs.length == 0) {
          $(`#${typeLookup[change.type]}List`).append(entry);
        }
        else if (name.localeCompare(certs[certs.length - 1].span) == 1) {
          certs[certs.length - 1].parent.after(entry);
        }
        else {
          for (let i = 0; i < certs.length; i++) {
            if (name.localeCompare(certs[i].span) == -1) {
              certs[i].parent.before(entry);
              break;
            }
          }
        }
      });

      changeJSON.updated.forEach(async (change) => {
        let idName;
        if (change.type == 4) {
          idName = '#k'
        }
        else {
          idName = '#c';
        }
        let line = $(`${idName}${change.id}`);
        let name = $(`${idName}${change.id} .certValue`);
        if (change.type == 4) {
          let keyDetails = await getKeyDetails({ id: change.id });
          if (keyDetails.name != name.text()) {
            // remove and reinsert
            newChange = { deleted: [ { type: change.type, id: change.id}], added: [ { type: change.type, id: change.id }], updated: [] };
            processUpdates(JSON.stringify(newChange));
          }

          let details = null;
          if ((details =  $(`#id_${change.type}_${change.id} .keyDetails`))) {
            $(`${idName}${change.id} .keyNameValue`).text(keyDetails.name);
            $(`${idName}${change.id} .keyPairValue`).text(keyDetails.certPair);
          }
        }
        else {
          let info = $(`${idName}${change.id} .certInfo`);
          if (info.length > 0) {
            try {
              let result = await getCertDetails({ name: name.text() });
              $(`${idName}${change.id} .certPrivateKey`).text(result.keyPresent == 'yes'? ' with private key' : '');
              $(`${idName}${change.id} .certInfoSignerValue`).text(result.signer);
              $(`${idName}${change.id} .certInfoKeyValue`).text(result.keyPresent);
              if (result.keyPresent == 'no') $(`${idName}${change.id} .certOptionalButtons`).hide();
              else $(`${idName}${change.id} .certOptionalButtons`).show();
            }
            catch({ error, message }) {
              $.magnificPopup.open({
                items: {
                  src: `<div class="error-popup">${error}: ${message}</div>`,
                  type: 'inline'
                }
              });
            }
          }
        }
      });
    }

    $(async function() {
      let datePicker;
      datePicker = $('#CAValidFrom');
      datePicker.datepicker( { minDate: -20, defaultDate: 0 } );
      datePicker = $('#CAValidTo');
      datePicker.datepicker( { defaultDate: +365 } );
      datePicker = $('#IntermediateValidFrom');
      datePicker.datepicker( { minDate: -20, defaultDate: 0 } );
      datePicker = $('#IntermediateValidTo');
      datePicker.datepicker( { defaultDate: +365 } );
      datePicker = $('#LeafValidFrom');
      datePicker.datepicker( { minDate: -20, defaultDate: 0 } );
      datePicker = $('#LeafValidTo');
      datePicker.datepicker( { defaultDate: +365 } );
      let files;
      [ ['root', buildCertList], 
        ['intermediate', buildCertList], 
        ['leaf', buildCertList], 
        ['key', buildKeyList] 
      ].forEach(async (entry) => { 
        files = await getDir(entry[0]);
        entry[1]($(`#${entry[0]}List`), files.files);
      });

      $('#generateCertForm').ajaxForm({
        dataType: 'json',
        success: createCACertResponse,
        error: (xhr, msg, err) => {
          let outmsg = JSON.parse(xhr.responseText);
          $.magnificPopup.open({
            items: {
              src: `<div class="error-popup">${err}: ${outmsg.message}</div>`,
              type: 'inline'
            }
          });
        } 
      });

      $('#newIntermediateForm').ajaxForm({
        dataType: 'json',
        success: createIntermediateCertResponse,
        error: (xhr, msg, err) => {
          let outmsg = JSON.parse(xhr.responseText);
          $.magnificPopup.open({
            items: {
              src: `<div class="error-popup">${err}: ${outmsg.message}</div>`,
              type: 'inline'
            }
          });
        } 
      });

      $('#newLeafForm').ajaxForm({
        dataType: 'json',
        success: createLeafCertResponse,
        error: (xhr, msg, err) => {
          let outmsg = JSON.parse(xhr.responseText);
          $.magnificPopup.open({
            items: {
              src: `<div class="error-popup">${err}: ${outmsg.message}</div>`,
              type: 'inline'
            }
          });
        } 
      });

      let dialogInt = $('#newIntermediate').dialog({
        autoOpen: false,
        height: 600,
        width: 350,
        modal: true,
      });

      let dialogLeaf = $('#newLeaf').dialog({
        autoOpen: false,
        height: 680,
        width: 350,
        modal: true,
      });
      let connectWebSocket = () => {
        let wsURL = (window.location.protocol == 'https:'? 'wss://' : 'ws://') + 
          window.location.hostname + 
         ':' + window.location.port;
        const ws = new WebSocket(wsURL);
        wsonopen = wsonopen;
        ws.onclose = wsonclose;
        ws.onerror = wsonerror;
        ws.onmessage =  wsonmessage;
      }
      let wsonopen = (e) => {
        console.log('WebSocket is open');
      }
      let wsonclose = (e) => {
        console.log('WebSocket is closed - reopening');
        connectWebSocket();
      }
      let wsonerror = (e) => {
        console.log('WebSocket error: ' + e.message);
      }
      let wsonmessage = (e) => {
        //- console.log('Received: ' + e.data);
        if (e.data != 'Connected') {
          processUpdates(e.data);
        }
      }
      connectWebSocket();
    });
  div#newIntermediate(title='** Title **')
   form#newIntermediateForm(action="/createIntermediateCert", method="post", encType="application/x-www-form-urlencoded")
    fieldset
      label.modalLabel(for="Password") Password (if key is encrypted):
      input(type='password' name='password' id='intPassword' value='' class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Country') Country: 
      input(type='text' name='country' id='intermediateC' value=C class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='State' styles { float: left; }) State:
      input(type='text' name='state' id='intermediateST' value=ST class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Location') Location:
      input(type='text' name='location' id='intermediateL' value=L class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Organization') Organization:
      input(type='text' name='organization' id='intermediateO' value=O class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Unit') Unit:
      input(type='text' name='unit' id='intermediateOU' value=OU class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Common Name') Common Name:
      input(type='text' name='commonName' id='intermediateCN' value='' class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Valid From') Valid from:
      input#IntermediateValidFrom(type='text' name='validFrom')
      label.modalLabel(for='Valid To') Valid to:
      input#IntermediateValidTo(type='text' name='validTo')
      input#intermediateSigner(type='text' name='signer' value='' class='hidden')
      div.intButtons
        input.button2#generateIntermediateReset(type="reset", value="Reset" title="Reset")
        input.button2#generateIntermediateButton.SubmitButton(type="submit" title="submit", value="Generate")
  div#newLeaf(title='** Title **')
   form#newLeafForm(action="/createLeafCert", method="post", encType="application/x-www-form-urlencoded")
    fieldset
      label.modalLabel(for="Password") Password (if key is encrypted):
      input(type='password' name='password' id='leafPassword' value='' class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Country') Country: 
      input(type='text' name='country' id='leafC' value=C class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='State' styles { float: left; }) State:
      input(type='text' name='state' title='State' id='leafST' value=ST class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Location') Location:
      input(type='text' name='location' id='leafL' value=L class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Organization') Organization:
      input(type='text' name='organization' id='leafO' value=O class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Unit') Unit:
      input(type='text' name='unit' id='leafOU' value=OU class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Common Name') Common Name:
      input(type='text' name='commonName' id='leafCN' value='' class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='SANs') SANs
      div#SANList
      div#SANInput
        select.SANType(title='SAN Type')
          option DNS 
          option IP
        input.SANValue(type='text')
        input.SANEnter(name='SanEnter' type='button' value='✔' onClick='AddSAN()')
      label.modalLabel(for='Valid From') Valid from:
      input#LeafValidFrom(type='text' name='validFrom')
      label.modalLabel(for='Valid To') Valid to:
      input#LeafValidTo(type='text' name='validTo')
      input#leafSigner(type='text' name='signer' value='' class='hidden')
      div.intButtons
        //- input.button2#generateLeafReset(type="reset", value="Reset" title="Reset")
        input.button2#generateLeafReset(type="button", value="Reset" title="Reset" onClick="resetLeafForm()")
        input.button2#generateLeafButton.SubmitButton(type="submit" title="submit", value="Generate")
  div.View
    span 
     h1.Banner 
      | Local Certificate Manager
      span.sub #{version}
    button(type='button' class='button1' onclick='togglePane(\'#uploadCertForm\')') Upload Certificate
    button(type='button' class='button1' onclick='togglePane(\'#uploadKeyForm\')') Upload Key
    button(type='button' class='button1' onclick='togglePane(\'#generateCertForm\')') Generate New CA
    //- form#uploadCertForm(action="/uploadCert", method="post", encType="multipart/form-data" class='slideForm') 
    form#uploadCertForm(method="post", encType="multipart/form-data" class='slideForm') 
      .Upload
        | Upload a certificate:&nbsp;
        span.UploadInput
          input#certUpload(type="file", name="certFile", accept=".pem,.crt", title="Upload file")
        div.SubmitButton
          input#fileCertReset(type="reset")
          button#uploadCertButton.SubmitButton(type="button", onClick="uploadCert()" title="submit", value="Upload") Upload
    form#uploadKeyForm(method="post", encType="multipart/form-data" class='slideForm')
      .Upload
        | Upload a key:&nbsp;
        span.UploadInput
          input#keyUpload(type="file", name="keyFile", accept=".pem,.crt,.key", title="Upload file")
        div.SubmitButton
          input#fileKeyReset(type="reset")
          button#uploadKeyButton.SubmitButton(type="button", onClick="uploadKey()" title="submit", value="Upload") Upload
          label#keyPasswordLabel(for='Optional Key Password') Optional Key Password:
          input#keyPasswordValue(type='text' name='keyPasswordValue' value='' class='text ui-widget-content ui-corner-all')
    form.slideForm#generateCertForm(action="/createCACert", method="post", encType="application/x-www-form-urlencoded") This will generate a private key and self-signed root CA pair
      .Country 
        span.SubjectTitle
          | Country:
        span.SubjectValue 
          input(type="text", name="country" value=C title="country")
      .State
        span.SubjectTitle
          | State:
        span.SubjectValue 
          input(type="text", name="state" value=ST)
      .Location
        span.SubjectTitle
          | Location:
        span.SubjectValue 
          input(type="text", name="location" value=L)
      .Organization 
        span.SubjectTitle
          | Organization 
        span.SubjectValue 
          input(type="text", name="organization" value=O)
      .Unit 
        span.SubjectTitle
          | Unit: 
        span.SubjectValue 
          input(type="text", name="unit" value=OU)
      .CommonName 
        span.SubjectTitle
          | Common Name: 
        span.SubjectValue 
          input(type="text", name="commonName" title="Common Name")
      .StartDate 
        span.SubjectTitle 
          | Valid from:
        span.SubjectValue 
          input#CAValidFrom(type="text", name="validFrom")
      .EndDate 
        span.SubjectTitle 
          | Valid to:
        span.SubjectValue 
          input#CAValidTo(type="text", name="validTo")
      div.SubmitButton
        input.button2#generateCAReset(type="reset", value="Reset" title="Reset")
        input.button2#generateCAButton.SubmitButton(type="submit" title="submit", value="Generate")

    .Certs 
      .Title
        h3 Root Certificates
        #rootCert.CertList
          ul#rootList.CertTable
    .Certs 
      .Title 
        h3 Itermediate Certificates 
        .CertList
          ul#intermediateList.CertTable 
    .Certs 
      .Title 
        h3 Leaf Certificates 
        .CertList
          ul#leafList.CertTable
    .Keys 
      .Title 
        h3 Private Keys 
        .CertList
          ul#keyList.CertTable