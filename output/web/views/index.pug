extends layout

block layout-content
  script(type="text/javascript").

    let sprintf = null;
    let nameLookup = [];
    let keyLookup = [];

    async function getDir(dir) {
      return new Promise((resolve, reject) => {
        $.ajax({
          url: `/certlist?type=${dir}`,
          method: 'GET',
          error: (xhr, status, err) => { 
            console.error('Failed to get ' + dir);
            reject(err);
          },
          success: (result, status, xhr) => {
            resolve(result);
          }
        });
      });
    }

    function buildKeyList(target, files) {
      let listEntryHTML = '<li class="keyLine" id="%s">' +
        '  <span onclick="keyClick(\'%s\')">' +
        '    <span class="keyArrow">></span>' +
        '    <span class="keyLine">%s</span>' +
        '  </span>' +
        '  <div class="keyDetails">' +
        '  </div>' +
        '</li>';
      target.empty();
      if (files.length == 0)
        target.append('<li>None</li>');
      else
        files.sort((l, r) => l.name.localeCompare(r))
          .forEach((file) => {
            target.append(sprintf(listEntryHTML, file.id, file.id, file.name));
            keyLookup[file.id] = file.name;
        });
    }

    function buildCertList(target, files) {
      let listEntryHTML = '<li class="certLine" id="%s">' +
        '  <span onclick="certClick(\'%s\')">' +
        '    <span class="certArrow">˃</span>' +
        '    <span class="certLine">%s</span>' +
        '  </span>' +
        '  <div class="certDetails">' +
        '  </div>' +
        '</li>';
      target.empty();
      if (files.length == 0)
        target.append('<li>None</li>');
      else
        files.sort((l, r) => l.name.localeCompare(r))
          .forEach((file) => {
            target.append(sprintf(listEntryHTML, file.id, file.id, file.name));
            nameLookup[file.id] = file.name;
          });
    }
    //- button(type='button' class='button1' onclick='togglePane(\'#uploadCertForm\')') Upload Certificate

    function certClick(id) {
      let detailHTML = 
        '<div class="certInfo slideform">' +
          '<div class="certInfoButtons">' + 
            //- '<button type="button" class="button2 certBtnDownload" onClick="certDownload(\'%s\')">Download</button>' +
            //- '<button type="button" class="button2 certBtnDownloadChain">Download Chain</button>' +
            '<a href="/certificates/%s.pem" class="button2 certBtnDownload">Download</a>' +
            '<a href="/api/chaindownload?name=%s" class="button2 certBtnDownloadChain">Download Chain</a>' +
            '<button type="button" class="button2 button2Red certBtnDelete" onClick="certDelete(\'%s\', \'%s\')">Delete</button>' +
            '<span class="certOptionalButtons">' +
            '  <button type="button" class="button2" onClick="newIntermediateDialog(\'%s\')">New Intermediate</button>' +
            '  <button type="button" class="button2" onClick="newLeafDialog(\'%s\')">New Leaf</button>' +
            '</span>' +
          '</div>' +
          '<div class="certInfoType">' +
            '<span class="certTypeLabel">Type:&nbsp;</span><span class="certTypeValue">%s</span><span class="certPrivateKey">%s</span></div>' +
          '<div class="certInfoSerial">Serial Number: %s</div>' +  
          '<div class="certFingerprint">FingerPrint: %s</div>' +
          '<div class="certInfoSubject">Subject:&nbsp;' +
            '<span class="certInfoSubjectC">C=%s;&nbsp;</span>' +
            '<span class="certInfoSubjectST">ST=%s;&nbsp;</span>' +
            '<span class="certInfoSubjectL">L=%s;&nbsp;</span>' +
            '<span class="certInfoSubjectO">O=%s;&nbsp;</span>' +
            '<span class="certInfoSubjectOU">OU=%s; </span>' +
            '<span class="certInfoSubjectCN">CN=%s</span>' +
          '</div>' +
          '<div class="certInfoIssuer">&nbsp;Issuer:&nbsp;' +
            '<span class="certInfoIssuerC">C=%s;&nbsp;</span>' +
            '<span class="certInfoIssuerST">ST=%s;&nbsp;</span>' +
            '<span class="certInfoIssuerL">L=%s;&nbsp;</span>' +
            '<span class="certInfoIssuerO">O=%s;&nbsp;</span>' +
            '<span class="certInfoIssuerOU">OU=%s;&nbsp;</span>' +
            '<span class="certInfoIssuerCN">CN=%s</span>' +
          '</div>' +
          '<div class="certInfoFrom">Valid from: %s</div>' +
          '<div class="certInfoTo">Valid to: %s</div>' +
          '<div class="certInfoSigner"><span class="certInfoSignerLabel">Signed by:&nbsp;</span><span class=certInfoSignerValue">%s</span></div>' +
          '<div class="certInfoKey"><span class="certInfoKeyLabel">Key Present:&nbsp;</span><span class=certInfoKeyValue">%s</span></div>' +
        '</div>'
      console.log('.certLine#' + id);
      let line = $('.certLine#' + id);
      let details = line.find('.certDetails');
      let arrow = line.find('.certArrow');
      if (details.is(':hidden') == false) {
        details.slideUp(400, () => {
          details['0'].innerText = '';
          arrow['0'].innerText = '>';
        });
      }
      else {
        arrow['0'].innerText = '˅';
        console.log(arrow['0'].innerText);
        var request = $.ajax({
          url: '/certDetails?name=' + nameLookup[id],
          method: 'GET',
          processData: false,
          contentType: false,
          error: (xhr, msg, err) => {
            $.magnificPopup.open({
              items: {
                src: `<div class="error-popup">${err}: ${xhr.responseText}</div>`,
                type: 'inline'
              }
            });
          },
          success: (result, status) => {
            let content = sprintf(detailHTML, 
              nameLookup[id],
              nameLookup[id],
              result.serialNumber,
              result.certType,
              nameLookup[id],
              nameLookup[id],
              result.certType,
              result.keyPresent == 'yes'? '&nbsp;with private key' : '',
              result.serialNumber,
              result.fingerprint,
              result.subject.C,
              result.subject.ST,
              result.subject.L, 
              result.subject.O,
              result.subject.OU,
              result.subject.CN,
              result.issuer.C,
              result.issuer.ST,
              result.issuer.L, 
              result.issuer.O,
              result.issuer.OU,
              result.issuer.CN,
              result.validFrom,
              result.validTo,
              result.signer, 
              result.keyPresent,
            );
            details['0'].innerHTML = content;
            if (result.certType == 'root') details.find('.' + 'certBtnDownloadChain').hide();
            if (result.keyPresent == 'no' || result.certType == 'leaf') details.find('.' + 'certOptionalButtons').hide();
            let nullTest = [
              [result.subject.C, 'certInfoSubjectC'],
              [result.subject.ST, 'certInfoSubjectST'],
              [result.subject.L, 'certInfoSubjectL'],
              [result.subject.O, 'certInfoSubjectO'],
              [result.subject.OU, 'certInfoSubjectOU'],
              [result.subject.CN, 'certInfoSubjectCN'],
              [result.issuer.C, 'certInfoIssuerC'],
              [result.issuer.ST, 'certInfoIssuerST'],
              [result.issuer.L, 'certInfoIssuerL'],
              [result.issuer.O, 'certInfoIssuerO'],
              [result.issuer.OU, 'certInfoIssuerOU'],
              [result.issuer.CN, 'certInfoIssuerCN'],
              [result.signed, 'certInfoSigned'], 
            ].forEach((entry) => {
              if (entry[0] == null) {
                let t = details.find('.' + entry[1]);
                t.hide();
              }
            });
            
            details.slideDown(500);

            console.log('success');
          }
        });
      };
    }

    function certDelete(serialNumber, type) {
      if (confirm(`This will delete ${serialNumber}. \n\nDo you wish to continue?`)) {
        console.log('Would delete ' + serialNumber.split(':').join(''));
        var request = $.ajax({
          url: '/deleteCert?serialNumber=' + serialNumber.split(':').join(''),
          method: 'DELETE',
          processData: false,
          contentType: false,
          error: (xhr, msg, err) => {
            let result = JSON.parse(xhr.responseJSON);
            $.magnificPopup.open({
              items: {
                src: `<div class="error-popup">${err}: ${result.error}</div>`,
                type: 'inline'
              }
            });
          },
          success: async (result, status) => {
            processChanges(result.types);
            $.magnificPopup.open({
              items: {
                src: `<div class="white-popup">Certificate Deleted</div>`,
                type: 'inline'
              }
            });
          }
        });
      }
    }

    function processChanges(types) {
      types.split(';').forEach(async (type) => {
        let files = await getDir(type);
        if (type == 'key') buildKeyList($(`#${type}List`), files.files);
        else buildCertList($(`#${type}List`), files.files);
      });
    }

    function newIntermediateDialog(name) {
      console.log(name);
      let dialog = $('#newIntermediate');
      dialog.dialog('option', 'title', 'Sign with ' + name);
      $('#intermediateSigner').val(name); 
      dialog.dialog('open');
    }

    function newLeafDialog(name) {
      console.log(name);
      let dialog = $('#newLeaf');
      dialog.dialog('option', 'title', 'Sign with ' + name);
      $('#leafSigner').val(name); 
      dialog.dialog('open');
    }

    //- function createIntermediate(xx) {
    //-   console.log(xx);
    //-   let form = $('#newIntermediateForm');
    //-   form.submit();
    //-   //- $('newIntermedidateForm').submit();
    //- }

    //- function certDownload(name) {
    //-   let filename = name + '.pem';
    //-   let filelocation = 'certificates/' + filename;
    //-   const anchor = $('<a>', { href: filelocation, download: filename })[0];
    //-   $('body').append(anchor);
    //-   anchor.click();
    //-   $(anchor).remove();
    //- }

    function keyClick(id) {
      let detailHTML =
        '<div class="keyInfo">' +
          '<div class="certInfoButtons">' + 
            '<button type="button" class="button2 keyBtnDownload" onClick="keyDownload(\'%s\')">Download</button>' +
            '<button type="button" class="button2 button2Red keyBtnDelete" onClick="keyDelete(\'%s\')">Delete</button>' +
          '</div>' +
          '<div class="keyName">' +
            '<span class="keyNameLabel">Name:&nbsp;</span><span class="keyNameValue">%s</span>' +
          '</div>' +
          '<div class="keyPair">' +
            '<span class="keyPairLabel">Pair:&nbsp;</span><span class="keyPairValue">%s</span>' +
          '</div>' +
          '<div class="keyEncrypted">' +
          '  <span class="keyEncryptedLabel">Encrypted:&nbsp;</span><span class="keyEncryptedValue">%s</span>' +
          '</div>'; 
      console.log('key click ' + id);
      let line = $('.keyLine#' + id);
      let details = line.find('.keyDetails');
      let arrow = line.find('.keyArrow');
      if (details.is(':hidden') == false) {
        details.hide();
        details['0'].innerText = '';
        arrow['0'].innerText = '>';
      }
      else {
        details.show();           // &#9650
        arrow['0'].innerText = '˅';
        console.log(arrow['0'].innerText);
        var request = $.ajax({
          url: '/keyDetails?name=' + keyLookup[id],
          method: 'GET',
          processData: false,
          contentType: false,
          error: (xhr, msg, err) => {
            $.magnificPopup.open({
              items: {
                src: `<div class="error-popup">${err}: ${xhr.responseText}</div>`,
                type: 'inline'
              }
            });
          },
          success: (result, status) => {
            let content = sprintf(detailHTML, result.name, result.name, result.name, result.certPair, result.encrypted? 'yes' : 'no');
            details['0'].innerHTML = content;
            console.log('success');
          }
        });
      };
    }

    function keyDownload(name) {
      let filename = name + '.pem';
      let filelocation = 'keys/' + filename;
      const anchor = $('<a>', { href: filelocation, download: filename })[0];
      $('body').append(anchor);
      anchor.click();
      $(anchor).remove();
    }

    function keyDelete(name) {
      if (confirm(`This will delete ${name}. \n\nDo you wish to continue?`)) {
        var request = $.ajax({
          url: '/deleteKey?name=' + name,
          method: 'DELETE',
          processData: false,
          contentType: false,
          error: (xhr, msg, err) => {
            $.magnificPopup.open({
              items: {
                src: `<div class="error-popup">${err}: ${JSON.parse(xhr.responseText).error}</div>`,
                type: 'inline'
              }
            });
          },
          success: async (result, status) => {
            processChanges(result.types);
            $.magnificPopup.open({
              items: {
                src: `<div class="white-popup">Key Deleted</div>`,
                type: 'inline'
              }
            });
          }
        });
      }
    }

    function togglePane(id) {
      let p = $(id);
      if (p.is(':visible')) {
        p.slideUp(500);
      }
      else {
        ['#uploadCertForm', '#uploadKeyForm', '#generateCertForm'].forEach((form) => {
          if (form != id) $(form).slideUp(500);
        })
        p.slideDown(500);
      }
    }

    function uploadCert(e) {
      //- e.preventDefault();
      var data = new FormData();
      var files = $('#certUpload');
      if (files[0].files.length == 0) {
        alert('No files choosen');
      }
      else {
        console.log('we have something to upload');
        for (let i = 0; i < files[0].files.length; i++) {
          data.append('certFile', files[0].files[i]);
        }

        var request = $.ajax({
          url: '/uploadCert',
          method: 'POST',
          processData: false,
          contentType: false,
          data: data,
          error: (xhr, msg, err) => {
            document.getElementById('uploadCertForm').reset();
            $.magnificPopup.open({
              items: {
                src: `<div class="error-popup">${err}: ${xhr.responseText}</div>`,
                type: 'inline'
              }
            });
            //- alert(JSON.stringify(err));
          },
          success: async (result, status) => {
            document.getElementById('uploadCertForm').reset();
            processChanges(result.types);
            $.magnificPopup.open({
              items: {
                src: `<div class="white-popup">File uploaded</div>`,
                type: 'inline'
              }
            });
          }
        });
      }
    }
    function uploadKey(e) {
      var data = new FormData();
      var files = $('#keyUpload');
      if (files[0].files.length == 0) {
        alert('No files choosen');
      }
      else {
        console.log('we have something to upload');
        for (let i = 0; i < files[0].files.length; i++) {
          data.append('keyFile', files[0].files[i]);
        }

        var request = $.ajax({
          url: '/uploadKey',
          method: 'POST',
          processData: false,
          contentType: false,
          data: data,
          error: (xhr, msg, err) => {
            document.getElementById('uploadKeyForm').reset();
            $.magnificPopup.open({
              items: {
                src: `<div class="error-popup">${err}: ${xhr.responseText}</div>`,
                type: 'inline'
              }
            });
            //- alert(JSON.stringify(err));
          },
          success: async (result, status) => {
            document.getElementById('uploadKeyForm').reset();
            processChanges(result.types);
            $.magnificPopup.open({
              items: {
                src: `<div class="white-popup">Key uploaded</div>`,
                type: 'inline'
              }
            });
          }
        });
      }
    }
    //- function createCACert(e) {
    //-   let data = new FormData();
    //-   console.log('generate it');
    //- }

    function createCACertResponse(result) {
      console.log(result);
      processChanges(result.types);
      $('#generateCAReset').click();
      $.magnificPopup.open({
        items: {
          src: `<div class="white-popup">${result.message}</div>`,
          type: 'inline'
        }
      });
    }

    function createIntermediateCertResponse(result) {
      console.log(result);
      processChanges(result.types);
      $('#generateIntermediateReset').click();
      $.magnificPopup.open({
        items: {
          src: `<div class="white-popup">${result.message}</div>`,
          type: 'inline'
        }
      });
      $('#newIntermediate').dialog('close');
    }

    function createLeafCertResponse(result) {
      console.log(result);
      processChanges(result.types);
      $('#generateLeafReset').click();
      $.magnificPopup.open({
        items: {
          src: `<div class="white-popup">${result.message}</div>`,
          type: 'inline'
        }
      });
      $('#newLeaf').dialog('close');
    }

    $(async function() {
      sprintf = window.sprintf;
      let datePicker;
      datePicker = $('#CAValidFrom');
      datePicker.datepicker( { minDate: -20, defaultDate: 0 } );
      datePicker = $('#CAValidTo');
      datePicker.datepicker( { defaultDate: +365 } );
      datePicker = $('#IntermediateValidFrom');
      datePicker.datepicker( { minDate: -20, defaultDate: 0 } );
      datePicker = $('#IntermediateValidTo');
      datePicker.datepicker( { defaultDate: +365 } );
      datePicker = $('#LeafValidFrom');
      datePicker.datepicker( { minDate: -20, defaultDate: 0 } );
      datePicker = $('#LeafValidTo');
      datePicker.datepicker( { defaultDate: +365 } );
      let files;
      [ ['root', buildCertList], 
        ['intermediate', buildCertList], 
        ['leaf', buildCertList], 
        ['key', buildKeyList] 
      ].forEach(async (entry) => { 
        files = await getDir(entry[0]);
        entry[1]($(`#${entry[0]}List`), files.files);
      });

      $('#generateCertForm').ajaxForm({
        dataType: 'json',
        success: createCACertResponse,
        error: (xhr, msg, err) => {
          let outmsg = JSON.parse(xhr.responseText);
          $.magnificPopup.open({
            items: {
              src: `<div class="error-popup">${err}: ${outmsg.message}</div>`,
              type: 'inline'
            }
          });
        } 
      });

      $('#newIntermediateForm').ajaxForm({
        dataType: 'json',
        success: createIntermediateCertResponse,
        error: (xhr, msg, err) => {
          let outmsg = JSON.parse(xhr.responseText);
          $.magnificPopup.open({
            items: {
              src: `<div class="error-popup">${err}: ${outmsg.message}</div>`,
              type: 'inline'
            }
          });
        } 
      });

      $('#newLeafForm').ajaxForm({
        dataType: 'json',
        success: createLeafCertResponse,
        error: (xhr, msg, err) => {
          let outmsg = JSON.parse(xhr.responseText);
          $.magnificPopup.open({
            items: {
              src: `<div class="error-popup">${err}: ${outmsg.message}</div>`,
              type: 'inline'
            }
          });
        } 
      });

      let dialogInt = $('#newIntermediate').dialog({
        autoOpen: false,
        height: 680,
        width: 350,
        modal: true,
      });

      let dialogLeaf = $('#newLeaf').dialog({
        autoOpen: false,
        height: 680,
        width: 350,
        modal: true,
      });
    });
  div#newIntermediate(title='** Title **')
   form#newIntermediateForm(action="/createIntermediateCert", method="post", encType="application/x-www-form-urlencoded")
    fieldset
      label.modalLabel(for="Password") Password (if key is encrypted):
      input(type='password' name='intPassword' id='intPassword' value='' class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Country') Country: 
      input(type='text' name='intCountry' id='intermediateC' value=C class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='State' styles { float: left; }) State:
      input(type='text' name='intState' id='intermediateST' value=ST class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Location') Location:
      input(type='text' name='intLocation' id='intermediateL' value=L class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Organization') Organization:
      input(type='text' name='intOrganization' id='intermediateO' value=O class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Unit') Unit:
      input(type='text' name='intUnit' id='intermediateOU' value=OU class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Common Name') Common Name:
      input(type='text' name='intCommonName' id='intermediateCN' value='' class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Valid From') Valid from:
      input#IntermediateValidFrom(type='text' name='intValidFrom')
      label.modalLabel(for='Valid To') Valid to:
      input#IntermediateValidTo(type='text' name='intValidTo')
      input#intermediateSigner(type='text' name='intSigner' value='' class='hidden')
      div.intButtons
        input.button2#generateIntermediateReset(type="reset", value="Reset" title="Reset")
        input.button2#generateIntermediateButton.SubmitButton(type="submit" title="submit", value="Generate")
  div#newLeaf(title='** Title **')
   form#newLeafForm(action="/createLeafCert", method="post", encType="application/x-www-form-urlencoded")
    fieldset
      label.modalLabel(for="Password") Password (if key is encrypted):
      input(type='password' name='leafPassword' id='leafPassword' value='' class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Country') Country: 
      input(type='text' name='leafCountry' id='leafC' value=C class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='State' styles { float: left; }) State:
      input(type='text' name='leafState' id='leafST' value=ST class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Location') Location:
      input(type='text' name='leafLocation' id='leafL' value=L class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Organization') Organization:
      input(type='text' name='leafOrganization' id='leafO' value=O class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Unit') Unit:
      input(type='text' name='leafUnit' id='leafOU' value=OU class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Common Name') Common Name:
      input(type='text' name='leafCommonName' id='leafCN' value='' class='text ui-widget-content ui-corner-all')
      label.modalLabel(for='Valid From') Valid from:
      input#LeafValidFrom(type='text' name='leafValidFrom')
      label.modalLabel(for='Valid To') Valid to:
      input#LeafValidTo(type='text' name='leafValidTo')
      input#leafSigner(type='text' name='leafSigner' value='' class='hidden')
      div.intButtons
        input.button2#generateLeafReset(type="reset", value="Reset" title="Reset")
        input.button2#generateLeafButton.SubmitButton(type="submit" title="submit", value="Generate")
  div.View
    h1.Banner Local Certificate Manager
    button(type='button' class='button1' onclick='togglePane(\'#uploadCertForm\')') Upload Certificate
    button(type='button' class='button1' onclick='togglePane(\'#uploadKeyForm\')') Upload Key
    button(type='button' class='button1' onclick='togglePane(\'#generateCertForm\')') Generate New CA
    //- form#uploadCertForm(action="/uploadCert", method="post", encType="multipart/form-data" class='slideForm') 
    form#uploadCertForm(method="post", encType="multipart/form-data" class='slideForm') 
      .Upload
        | Upload a certificate:&nbsp;
        span.UploadInput
          input#certUpload(type="file", name="certFile", accept=".pem,.crt", title="Upload file")
        div.SubmitButton
          input#fileCertReset(type="reset")
          button#uploadCertButton.SubmitButton(type="button", onClick="uploadCert()" title="submit", value="Upload") Upload
    form#uploadKeyForm(method="post", encType="multipart/form-data" class='slideForm')
      .Upload
        | Upload a key:&nbsp;
        span.UploadInput
          input#keyUpload(type="file", name="keyFile", accept=".pem,.crt,.key", title="Upload file")
        div.SubmitButton
          input#fileKeyReset(type="reset")
          button#uploadKeyButton.SubmitButton(type="button", onClick="uploadKey()" title="submit", value="Upload") Upload
    form.slideForm#generateCertForm(action="/createCACert", method="post", encType="application/x-www-form-urlencoded") This will generate a private key and self-signed root CA pair
      .Country 
        span.SubjectTitle
          | Country:
        span.SubjectValue 
          input(type="text", name="caCountry" value=C title="country")
      .State
        span.SubjectTitle
          | State:
        span.SubjectValue 
          input(type="text", name="caState" value=ST)
      .Location
        span.SubjectTitle
          | Location:
        span.SubjectValue 
          input(type="text", name="caLocation" value=L)
      .Organization 
        span.SubjectTitle
          | Organization 
        span.SubjectValue 
          input(type="text", name="caOrganization" value=O)
      .Unit 
        span.SubjectTitle
          | Unit: 
        span.SubjectValue 
          input(type="text", name="caUnit" value=OU)
      .CommonName 
        span.SubjectTitle
          | Common Name: 
        span.SubjectValue 
          input(type="text", name="caCommonName" title="Common Name")
      .StartDate 
        span.SubjectTitle 
          | Valid from:
        span.SubjectValue 
          input#CAValidFrom(type="text", name="caValidFrom")
      .EndDate 
        span.SubjectTitle 
          | Valid to:
        span.SubjectValue 
          input#CAValidTo(type="text", name="caValidTo")
      div.SubmitButton
        input.button2#generateCAReset(type="reset", value="Reset" title="Reset")
        input.button2#generateCAButton.SubmitButton(type="submit" title="submit", value="Generate")

    .Certs 
      .Title
        h3 Root Certificates
        #rootCert.CertList
          ul#rootList.CertTable
    .Certs 
      .Title 
        h3 Itermediate Certificates 
        .CertList
          ul#intermediateList.CertTable 
    .Certs 
      .Title 
        h3 Leaf Certificates 
        .CertList
          ul#leafList.CertTable
    .Keys 
      .Title 
        h3 Private Keys 
        .CertList
          ul#keyList.CertTable